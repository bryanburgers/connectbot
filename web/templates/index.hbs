{{#> layout}}
    {{#*inline "body"}}
    <main>
        <div id="devices">
        </div>
    </main>

    <footer>
        <div id="durations" class="durations">
            <button data-hours=1>1 hr</button> &bull; <button data-hours=2 data-selected=selected>2 hrs</button> &bull; <button data-hours=8>8 hrs</button> &bull; <button data-hours=24>1 day</button> &bull; <button data-hours=48>2 days</button>
        </div>
    </footer>

    <template id="device">
        <article data-id class="device">
            <header>
                <h2 item-name><a href=""></a></h2>
                <h3 item-id class="id"></h3>
                <h3 item-address class="address" data-visible></h3>
            </header>
            <div class="main">
                <div item-history class="history"></div>
            </div>
        </article>
    </template>
    {{/inline}}
    {{#*inline "scripts"}}
    <script>
        const durations = document.getElementById('durations')
        const hours = parseInt(durations.querySelector('[data-selected=selected]').getAttribute('data-hours'), 10) || 2
        window.selectedHours = hours

        durations.addEventListener('click', e => {
            if (!e.target.hasAttribute('data-hours')) {
                return
            }

            const hours = parseInt(e.target.getAttribute('data-hours'), 10)
            window.selectedHours = hours

            for (let item of durations.querySelectorAll('[data-hours]')) {
                if (item !== e.target) {
                    item.setAttribute('data-selected', '')
                }
            }
            e.target.setAttribute('data-selected', 'selected')

            render()
        }, true);

        async function build() {
            const response = await fetch('/devices.json')
            const json = await response.json();
            window.deviceData = json

            render()
        }

        function render() {
            const template = document.getElementById('device')
            const devices = document.getElementById('devices')

            const fragment = document.createDocumentFragment()

            const json = window.deviceData;

            json.devices.sort((a, b) => {
                if (a.name < b.name) {
                    return -1
                }
                if (b.name < a.name) {
                    return 1
                }
                return 0
            })

            for (let device of json.devices) {
                const node = document.importNode(template.content, true)
                const li = node.querySelector('[data-id]')
                li.setAttribute('data-id', device.id)

                let nameEl = li.querySelector('[item-name]')
                let nameLink = nameEl.querySelector('a')
                nameLink.innerText = device.name
                nameLink.setAttribute('href', `/d/${device.id}`)

                let idEl = li.querySelector('[item-id]')
                idEl.innerText = device.id

                let addressEl = li.querySelector('[item-address]')
                if (device.address) {
                    addressEl.innerText = device.address
                    addressEl.setAttribute('data-visible', 'visible')
                    addressEl.setAttribute('data-state', 'active')
                }
                else if (device.connection_history.length && device.connection_history[device.connection_history.length - 1].address) {
                    addressEl.innerText = device.connection_history[device.connection_history.length - 1].address
                    addressEl.setAttribute('data-visible', 'visible')
                    addressEl.setAttribute('data-state', 'inactive')
                }

                const historyEl = li.querySelector('[item-history]')
                const now = moment.utc()
                const start = now.clone().subtract(window.selectedHours, 'hours').unix()
                const end = now.unix()
                const duration = end - start
                for (let history of device.connection_history) {
                    if (history.last_message && history.last_message < start) {
                        continue
                    }
                    const el = document.createElement('div')
                    el.setAttribute('class', 'history-item')
                    const connectedAt = moment.utc(history.connected_at, moment.ISO_8601)
                    const barStart = (Math.max(connectedAt.unix(), start) - start)/duration

                    el.style.left = (100 * barStart) + '%'

                    if (history.last_message) {
                        const lastMessage = moment.utc(history.last_message, moment.ISO_8601)
                        const barEnd = (Math.max(lastMessage.unix(), start) - start)/duration
                        el.style.right = ((1 - barEnd) * 100) + '%'
                    }
                    else {
                        el.style.right = '0'
                    }

                    historyEl.appendChild(el)
                }

                fragment.appendChild(li)
            }

            while (devices.firstChild) {
                devices.removeChild(devices.firstChild)
            }
            devices.appendChild(fragment)
        }

        build().catch(err => console.log(err))

        setInterval(async () => {
            try {
                await build()
            }
            catch (err) {
                console.log(err)
            }
        }, 2000)
    </script>
    {{/inline}}
{{/layout}}
