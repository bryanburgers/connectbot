syntax = "proto3";

package control;

message ClientMessage {
  uint32 message_id = 1;
  uint32 in_response_to = 2;
  oneof msg {
    ClientsRequest clients_request = 3;
    SshConnection ssh_connection = 4;
    CreateDevice create_device = 5;
    RemoveDevice remove_device = 6;
    SetName set_name = 7;
  }
}

message ServerMessage {
  uint32 message_id = 1;
  uint32 in_response_to = 2;
  oneof msg {
    ClientsResponse clients_response = 3;
    SshConnectionResponse ssh_connection_response = 4;
    CreateDeviceResponse create_device_response = 5;
    RemoveDeviceResponse remove_device_response = 6;
    SetNameResponse set_name_response = 7;
  }
}

message ClientsRequest {}

message ClientsResponse {
  message Client {
    // The ID of the client.
    string id = 1;
    // All of the known connections.
    repeated Connection connections = 2;
    // The remote address of the client.
    string address = 3;
    // A history of connections for this client.
    repeated ConnectionHistoryItem connection_history = 4;
    // The name of the device
    string name = 5;
  }

  enum State {
    UNKNOWN_STATE = 0;
    REQUESTED = 1;
    CONNECTING = 2;
    CONNECTED = 3;
    DISCONNECTING = 4;
    DISCONNECTED = 5;
    FAILED = 6;
  }

  enum ActiveState {
    UNKNOWN_ACTIVE_STATE = 0;
    ACTIVE = 1;
    INACTIVE = 2;
  }

  message Connection {
    // The globally unique ID of the client.
    string id = 1;
    State state = 2;
    ActiveState active = 3;
    string forward_host = 4;
    uint32 forward_port = 5;
    uint32 remote_port = 6;
    bool gateway_port = 7;
  }

  enum ConnectionHistoryType {
    UNKNOWN_CONNECTION_HISTORY_TYPE = 0;
    // A connection that started/ended in the past. It is a "closed" interval.
    CLOSED = 1;
    // An active connection that started in the past and hasn't ended. An "open" interval.
    OPEN = 2;
  }

  message ConnectionHistoryItem {
    ConnectionHistoryType type = 1;
    // When the initialize method was received.
    //
    // The timestamp format is a unix time (seconds since epoch).
    uint64 connected_at = 2;
    // When the last message was received. If type == OPEN, this will be 0 and should not be used.
    //
    // The timestamp format is a unix time (seconds since epoch).
    uint64 last_message = 3;
    // The address of the connection.
    string address = 4;
  }

  repeated Client clients = 1;
}

message SshConnection {
  // Enable an SSH connection. This is idempotent: the server can send this as
  // frequently as it likes, and the client must be able to handle it.
  message Enable {
    // The host (local or within the local network) to forward. If this is empty, assume localhost
    string forward_host = 1;
    // The port (local or within the local network) to forward
    uint32 forward_port = 2;
    // Whether to use a gateway port (make sure the port gets forward externally)
    bool gateway_port = 3;
  }

  // Disable an SSH connection. Once a connection is disabled, it cannot be
  // re-enabled. (A new SSH connection would be needed instead of re-enabling.)
  message Disable {
    string connection_id = 1;
  }

  // The ID of the device
  string device_id = 1;
  oneof msg {
    Enable enable = 2;
    Disable disable = 3;
  }
}

message SshConnectionResponse {
  enum Status {
    UNKNOWN_STATUS = 0;
    SUCCESS = 1;
    ERROR = 2;
  }

  // Whether the request succeeded or failed.
  Status status = 1;
  // The new globally unique ID of the SSH request (which can be used to disconnect later)
  string connection_id = 2;
  // The remote port that has been allocated.
  uint32 remote_port = 3;
}

message CreateDevice {
  string device_id = 1;
}

message CreateDeviceResponse {
  enum Response {
    UNKNOWN_RESPONSE = 0;
    CREATED = 1;
    EXISTS = 2;
  }

  Response response = 1;
}

message RemoveDevice {
  string device_id = 1;
}

message RemoveDeviceResponse {
  enum Response {
    UNKNOWN_RESPONSE = 0;
    REMOVED = 1;
    ACTIVE = 2;
    NOT_FOUND = 3;
  }

  Response response = 1;
}

message SetName {
  string device_id = 1;
  string name = 2;
}

message SetNameResponse {
  enum Status {
    UNKNOWN_RESPONSE = 0;
    SUCCESS = 1;
    NOT_FOUND = 2;
  }

  Status status = 1;
}
