syntax = "proto3";

package control;

message ClientMessage {
  uint32 message_id = 1;
  uint32 in_response_to = 2;
  oneof msg {
    ClientsRequest clients_request = 3;
    SshConnection ssh_connection = 4;
  }
}

message ServerMessage {
  uint32 message_id = 1;
  uint32 in_response_to = 2;
  oneof msg {
    ClientsResponse clients_response = 3;
    SshConnectionResponse ssh_connection_response = 4;
  }
}

message ClientsRequest {}

message ClientsResponse {
  message Client {
    // The ID of the client.
    string id = 1;
    // All of the known connections.
    repeated Connection connections = 2;
    // The remote address of the client.
    string address = 3;
  }

  enum State {
    UNKNOWN_STATE = 0;
    REQUESTED = 1;
    CONNECTING = 2;
    CONNECTED = 3;
    DISCONNECTING = 4;
    DISCONNECTED = 5;
    FAILED = 6;
  }

  message Connection {
    // The globally unique ID of the client.
    string id = 1;
    State state = 2;
    string forward_host = 3;
    uint32 forward_port = 4;
    uint32 remote_port = 5;
    bool gateway_port = 6;
  }

  repeated Client clients = 1;
}

message SshConnection {
  // Enable an SSH connection. This is idempotent: the server can send this as
  // frequently as it likes, and the client must be able to handle it.
  message Enable {
    // The host (local or within the local network) to forward. If this is empty, assume localhost
    string forward_host = 1;
    // The port (local or within the local network) to forward
    uint32 forward_port = 2;
    // Whether to use a gateway port (make sure the port gets forward externally)
    bool gateway_port = 3;
  }

  // Disable an SSH connection. Once a connection is disabled, it cannot be
  // re-enabled. (A new SSH connection would be needed instead of re-enabling.)
  message Disable {}

  // The ID of the device
  string client_id = 1;
  oneof msg {
    Enable enable = 2;
    Disable disable = 3;
  }
}

message SshConnectionResponse {
  enum Status {
    UNKNOWN_STATUS = 0;
    SUCCESS = 1;
    ERROR = 2;
  }
  // The new globally unique ID of the SSH request (which can be used to disconnect later)
  string request_id = 2;
  // The remote port that has been allocated.
  uint32 remote_port = 3;
}
